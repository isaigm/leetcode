{"id":336915533,"lang":"python3","lang_name":"Python3","time":"2 years, 7 months","timestamp":1589061419,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/336915533/","is_pending":"Not Pending","title":"Valid Perfect Square","memory":"N/A","code":"class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        def get_primes_list(n: int):\n            probable_primes = [True for _ in range(n)]\n            for i in range(2, n):\n                if probable_primes[i]:\n                    j = 2\n                    while i * j < n:\n                        probable_primes[i * j] = False\n                        j += 1\n            return [idx for idx in range(2, len(probable_primes)) if probable_primes[idx]]\n        primes = get_primes_list(num // 2)\n        idx = 0\n        factors = {}\n        while num > 1:\n            if num % primes[idx] == 0:\n                num //= primes[idx]\n                try:\n                    factors[primes[idx]] += 1\n                except:\n                    factors[primes[idx]] = 1\n            else: idx += 1\n        divisors = 1\n        for _, exp in factors.items():\n            divisors *= (exp + 1)\n        return divisors % 2 == 1","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000","title_slug":"valid-perfect-square","has_notes":false,"notes":"","topic_tags":[]}