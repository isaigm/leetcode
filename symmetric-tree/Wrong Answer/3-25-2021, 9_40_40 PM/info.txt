{"id":472529317,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1616730040,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/472529317/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        std::queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty())\n        {\n            int s = q.size();\n            std::vector<int> level;\n            for(int i = 0; i < s; i++)\n            {\n                auto n = q.front();\n                q.pop();\n                level.push_back(n->val);\n                if(n->left)\n                {\n                    q.push(n->left);\n                }\n                if(n->right)\n                {\n                    q.push(n->right);\n                }\n            }\n            for(int i = 0, j = s - 1; i <= j; i++, j--){\n                if(level[i] != level[j]) return false;\n            } \n            \n        }\n        return true;\n    }\n};","compare_result":"10001001111011001110110101011111110111011110111111100101011111001100111011001110101000110110101100111111111111011110111110001111110101101001011111101011111110011101111111100011110001101111011111","title_slug":"symmetric-tree","has_notes":false,"notes":"","topic_tags":[]}