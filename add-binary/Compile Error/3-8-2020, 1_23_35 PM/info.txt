{"id":310632231,"lang":"rust","lang_name":"Rust","time":"2 years, 9 months","timestamp":1583695415,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/310632231/","is_pending":"Not Pending","title":"Add Binary","memory":"N/A","code":"impl Solution {\n    pub fn fill_with_zeros(st : &mut String, n : usize){\n    let mut z = 0;\n    while z  < n{\n        st.insert(0, '0');\n        z += 1;\n    }\n}\npub fn add_binary(s1 : String, s2 : String) -> String{\n    let mut result = String::from(\"\");\n    let mut r1 = s1.clone(); \n    let mut r2 = s2.clone();\n    let l1 = s1.len();\n    let l2 = s2.len();\n    if l1 > l2{\n        fill_with_zeros(&mut r2, l1 - l2);\n    }\n    else if l2 > l1{\n        fill_with_zeros(&mut r1, l2 - l1);\n    }\n    let mut carry = 0;\n    let mut s = 0;\n    let mut bit : char;\n    println!(\"{}\", r1);\n    println!(\"{}\", r2);\n    for idx in (0..r1.len()).rev(){\n        let b1 = r1.as_bytes()[idx] as u32 - '0' as u32;\n        let b2 = r2.as_bytes()[idx] as u32 - '0' as u32;\n        s = b1 + b2 + carry;\n        if s == 2{\n            bit = '0';\n            carry = 1;\n        }else if s == 3{\n            bit = '1';\n            carry = 1;\n        }\n        else{\n            bit = match std::char::from_digit(s, 2){\n                Some(b) => b,\n                None => '0'\n            };\n            carry = 0;\n        }\n        result.insert(0, bit);\n    }\n    if carry == 1{\n        result.insert(0, '1');\n    }\n    return result;\n}\n}","compare_result":null,"title_slug":"add-binary","has_notes":false,"notes":"","topic_tags":[]}