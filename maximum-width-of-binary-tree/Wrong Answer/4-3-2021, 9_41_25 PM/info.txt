{"id":476191176,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617507685,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/476191176/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        int ans = INT_MIN;\n        std::queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty())\n        {\n            int s = q.size();\n            int first = -1;\n            int last = -1;\n            for(int i = 0; i < s; i++)\n            {\n                auto n = q.front();\n                q.pop();\n                if(n != nullptr)\n                {\n                    if(first == -1)\n                    {\n                        first = i;\n                    }\n                    last = i;\n                    q.push(n->left);\n                    q.push(n->right);\n                    \n                }\n            }\n            if(first != -1 && last != -1)\n            {\n                ans = std::max(ans, last - first + 1);\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111101111111111111111111111111111111111111111111111111111111111111111110111111111110111111101100011000110010001","title_slug":"maximum-width-of-binary-tree","has_notes":false,"notes":"","topic_tags":[]}