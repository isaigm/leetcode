{"id":476203460,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617509172,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/476203460/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"16.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        int ans = INT_MIN;\n        std::queue<std::pair<TreeNode*, int>> q;\n        q.push({root, 0});\n        while(!q.empty())\n        {\n            int s = q.size();\n            int start = q.front().second;\n            int end = q.back().second;\n            ans = std::max(ans, end - start + 1);\n            for(int i = 0; i < s; i++)\n            {\n                auto n = q.front();\n                int idx = q.front().second - start;\n                q.pop();\n                if(n.first->left)\n                {\n                    q.push({n.first->left, 2*idx + 1});\n                }\n                if(n.first->right)\n                {\n                    q.push({n.first->right, 2*idx + 2});\n                }\n            }\n\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"notes":"","topic_tags":[]}