{"id":379613413,"lang":"cpp","lang_name":"C++","time":"2 years, 4 months","timestamp":1597193086,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/379613413/","is_pending":"Not Pending","title":"Combination Sum","memory":"11.1 MB","code":"class Solution {\npublic:\nvoid dfs(std::vector<std::vector<int>> &sums, std::vector<int>&candidates, std::vector<int> &combination, int curr_idx, int target){\n    if(target == 0){\n        sums.push_back(combination);\n        return;\n    }\n    for(int i = curr_idx; i < (int) candidates.size(); i++){\n        if(candidates[i] > target) break;\n        combination.push_back(candidates[i]);\n        dfs(sums, candidates, combination, i, target - candidates[i]);\n        combination.pop_back();\n    }\n}\nstd::vector<std::vector<int>> combinationSum(std::vector<int>& candidates, int target) {\n    std::vector<std::vector<int>> sums;\n    std::vector<int> aux;\n    std::sort(candidates.begin(), candidates.end());\n    dfs(sums, candidates, aux, 0, target);\n    return sums;\n}\n\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"notes":"","topic_tags":[]}