{"id":459109320,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613969592,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/459109320/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nstruct info{\n    int level;\n    int val;\n    bool side;\n};\nclass Comparator{\n  public:\n    bool operator() (info &inf1, info &inf2)\n    {\n        if(inf1.level == inf2.level)\n        {\n            if(!inf1.side && !inf2.side) return false;\n            if(inf1.side && inf2.side)   return false;\n            if(inf1.side && !inf2.side)  return true;\n            if(!inf1.side && inf2.side)  return false;\n        }\n        return inf1.level > inf2.level;\n    } \n};\nclass Solution {\npublic:\n    void util(TreeNode *root, int level, std::priority_queue<info, std::vector<info>, Comparator> &max_heap, bool side)\n    {\n       if(root != nullptr)\n       {\n           if(root->left == nullptr && root->right == nullptr)\n           {\n               max_heap.push({level, root->val, side});\n               if(max_heap.size() > 1)\n               {\n                   max_heap.pop();\n               }\n           }\n           util(root->left, level + 1, max_heap, true);\n           util(root->right, level + 1, max_heap, false);\n       }\n    }\n    int findBottomLeftValue(TreeNode* root) {\n        std::priority_queue<info, std::vector<info>, Comparator> max_heap;\n        util(root, 0, max_heap, true);\n        return max_heap.top().val;\n    }\n};","compare_result":"1111111111110111111111111111111111111111111111111111111110111111111111111111","title_slug":"find-bottom-left-tree-value","has_notes":false,"notes":"","topic_tags":[]}