{"id":459103090,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613968523,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/459103090/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Comparator{\n  public:\n    bool operator() (std::pair<int, int> &p1, std::pair<int, int> &p2)\n    {\n        return p1.first > p2.first;\n    } \n};\nclass Solution {\npublic:\n    void util(TreeNode *root, int level, bool is_left, std::priority_queue<std::pair<int,int>, std::vector<std::pair<int, int>>, Comparator> &max_heap)\n    {\n       if(root != nullptr)\n       {\n           if(root->left == nullptr && root->right == nullptr && is_left)\n           {\n               max_heap.push({level, root->val});\n               if(max_heap.size() > 1)\n               {\n                   max_heap.pop();\n               }\n           }\n           util(root->left, level + 1, true, max_heap);\n           util(root->right, level + 1, false, max_heap);\n       }\n    }\n    int findBottomLeftValue(TreeNode* root) {\n        std::priority_queue<std::pair<int,int>, std::vector<std::pair<int, int>>, Comparator> max_heap;\n        util(root, 0, true, max_heap);\n        auto [_, ans] = max_heap.top();\n        \n        return ans;\n    }\n};","compare_result":"1111100000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-bottom-left-tree-value","has_notes":false,"notes":"","topic_tags":[]}