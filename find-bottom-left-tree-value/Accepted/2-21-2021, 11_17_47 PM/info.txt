{"id":459117615,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613971067,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/459117615/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"21.9 MB","code":"struct info\n{\n    int level;\n    int val;\n    int how_much_left;\n};\nclass Comparator\n{\npublic:\n    bool operator()(info &inf1, info &inf2)\n    {\n        if (inf1.level == inf2.level)\n        {\n            return inf1.how_much_left > inf2.how_much_left;\n        }\n        return inf1.level > inf2.level;\n    }\n};\nclass Solution\n{\npublic:\n    void util(TreeNode *root, int level, std::priority_queue<info, std::vector<info>, Comparator> &max_heap, int how_much_left)\n    {\n        if (root != nullptr)\n        {\n            if (root->left == nullptr && root->right == nullptr)\n            {\n                max_heap.push({level, root->val, how_much_left});\n                if (max_heap.size() > 1)\n                {\n                    max_heap.pop();\n                }\n            }\n            util(root->left, level + 1, max_heap, how_much_left + 1);\n            util(root->right, level + 1, max_heap, how_much_left - 1);\n        }\n    }\n    int findBottomLeftValue(TreeNode *root)\n    {\n        std::priority_queue<info, std::vector<info>, Comparator> max_heap;\n        util(root, 0, max_heap, 0);\n        return max_heap.top().val;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value","has_notes":false,"notes":"","topic_tags":[]}