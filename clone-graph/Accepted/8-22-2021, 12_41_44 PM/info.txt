{"id":542491809,"lang":"cpp","lang_name":"C++","time":"1 year, 4 months","timestamp":1629654104,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/542491809/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        if(node == nullptr) return node;\n        std::unordered_set<int> visited;\n        std::queue<Node*> q;\n        std::map<int, Node*> nodes;\n        q.push(node);\n        while(!q.empty())\n        {\n            auto n = q.front();\n            \n            visited.insert(n->val);\n            nodes[n->val] = new Node(n->val);\n            q.pop();\n         \n            for(const auto &c: n->neighbors)\n            {\n                if(c && visited.find(c->val) == visited.end())\n                {\n                    q.push(c);\n                    visited.insert(c->val);\n                }\n          \n            }\n        }\n        visited.clear();\n        q.push(node);\n        while(!q.empty())\n        {\n            auto n = q.front();\n            \n            visited.insert(n->val);\n            \n            q.pop();\n            \n            for(const auto &c: n->neighbors)\n            {\n                \n                if(c && visited.find(c->val) == visited.end())\n                {\n                    q.push(c);\n                     visited.insert(c->val);\n                }\n                nodes[n->val]->neighbors.push_back(nodes[c->val]);\n          \n            }\n        }\n        \n        return nodes[1];\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"notes":"","topic_tags":[]}