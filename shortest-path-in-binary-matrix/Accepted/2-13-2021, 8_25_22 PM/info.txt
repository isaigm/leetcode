{"id":455735738,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613269522,"status":10,"status_display":"Accepted","runtime":"568 ms","url":"/submissions/detail/455735738/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"83.3 MB","code":"class Solution {\npublic:\n    int shortestPathBinaryMatrix(std::vector<std::vector<int>> &grid)\n    {\n        auto dim = grid.size();\n        if(grid[0][0] == 1 || grid[dim -1][dim - 1]) return -1;\n        if(dim == 1 && grid[0][0] == 0) return 1;\n        std::map<std::pair<int, int>, bool> visited;\n        auto get_neighbours = [dim, &visited, &grid](int r, int c) {\n            std::vector<std::pair<int, int>> neighbours;\n            for (int i = r - 1; i <= r + 1; i++)\n            {\n                for (int j = c - 1; j <= c + 1; j++)\n                {\n                    if ((i == r && j == c) || i < 0 || j < 0 || i >= dim || j >= dim)\n                    {\n                        continue;\n                    }\n                    auto cell = std::make_pair(i, j);\n                    if (grid[i][j] == 0)\n                    {\n                        neighbours.push_back(cell);\n                    }\n                }\n            }\n            return neighbours;\n        };\n        std::queue<std::pair<int, int>> nodes;\n        std::map<std::pair<int, int>, std::pair<int, int>> prev;\n        nodes.push(std::make_pair(0, 0));\n        visited[std::make_pair(0, 0)] = true;\n        while (!nodes.empty())\n        {\n            auto node = nodes.front();\n            nodes.pop();\n            auto neighbours = get_neighbours(node.first, node.second);\n            for (const auto &next : neighbours)\n            {\n                if (!visited[next])\n                {\n                    nodes.push(next);\n                    visited[next] = true;\n                    prev[next] = node;\n                }\n            }\n        }\n        \n        std::vector<std::pair<int, int>> path;\n        \n        auto step = std::make_pair(dim - 1, dim - 1);\n        auto iter = prev.find(step);\n        if(iter == prev.end()) return -1;\n        path.push_back(step);\n        while (iter != prev.end())\n        {\n            path.push_back(iter->second);\n            iter = prev.find(iter->second);\n        }\n        if (path[path.size() - 1].first == 0 && path[path.size() - 1].second == 0)\n        {\n            return path.size();\n        }\n        return -1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"notes":"","topic_tags":[]}