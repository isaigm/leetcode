{"id":480804525,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1618458907,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/480804525/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *new_root = nullptr;\n    TreeNode *cursor = nullptr;\n    TreeNode* increasingBST(TreeNode* root) {\n        util(root);\n        \n        return new_root;\n    }\n    void util(TreeNode *root)\n    {\n        if(root)\n        {\n            util(root->left);\n            if(new_root == nullptr)\n            {\n                new_root = new TreeNode(root->val);\n                cursor = new_root;\n            }else\n            {\n                cursor->right = new TreeNode(root->val);\n                cursor = cursor->right;\n            }\n            util(root->right);\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"notes":"","topic_tags":[]}