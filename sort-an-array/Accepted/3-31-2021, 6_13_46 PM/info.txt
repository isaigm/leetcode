{"id":474882016,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617236026,"status":10,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/474882016/","is_pending":"Not Pending","title":"Sort an Array","memory":"85.9 MB","code":"class Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        merge_sort(0, nums.size() - 1, nums);\n        return nums;\n    }\n    //maybe not the best implementation\nvoid merge(int l1, int r1, int l2, int r2, std::vector<int> &v)\n{\n    std::vector<int> sorted;\n    int temp = l1;\n    while (l1 < r1 + 1 && l2 < r2 + 1)\n    {\n        if (v[l1] < v[l2])\n        {\n            sorted.push_back(v[l1]);\n            l1++;\n        }\n        else\n        {\n            sorted.push_back(v[l2]);\n            l2++;\n        }\n    }\n    if (l1 == r1 + 1)\n    {\n        for (int i = l2; i <= r2; i++)\n        {\n            sorted.push_back(v[i]);\n        }\n    }\n    else if (l2 == r2 + 1)\n    {\n        for (int i = l1; i <= r1; i++)\n        {\n            sorted.push_back(v[i]);\n        }\n    }\n    for (int i = temp, j = 0; i <= r2; i++, j++)\n    {\n        v[i] = sorted[j];\n    }\n}\nvoid merge_sort(int left, int right, std::vector<int> &v)\n{\n    if (left < right)\n    {\n        int mid = left + (right - left) / 2;\n        merge_sort(left, mid, v);\n        merge_sort(mid + 1, right, v);\n        merge(left, mid, mid + 1, right, v);\n    }\n}\n};","compare_result":"11111111111","title_slug":"sort-an-array","has_notes":false,"notes":"","topic_tags":[]}