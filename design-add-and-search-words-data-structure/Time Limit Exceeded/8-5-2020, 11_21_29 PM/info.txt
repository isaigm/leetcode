{"id":376792481,"lang":"cpp","lang_name":"C++","time":"2 years, 4 months","timestamp":1596687689,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/376792481/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"#include <bits/stdc++.h>\nusing namespace std;\nstruct Node{\n   bool isEnd;\n   map <char, Node*> child;\n   Node(){\n      isEnd = false;\n   }\n};\nclass WordDictionary {\n   public:\n   Node* head;\n   WordDictionary() {\n      head = new Node();\n   }\n   void insertNode(Node* head, string s){\n      Node* curr = head;\n      int n = s.size();\n      for(int i = 0; i < n; i++){\n         char x = s[i];\n         if(!curr->child[x]){\n            curr->child[x] = new Node();\n         }\n         curr = curr->child[x];\n      }\n      curr->isEnd = true;\n   }\n   void addWord(string word) {\n      insertNode(head, word);\n   }\n   bool check(Node* curr, string s, int idx = 0){\n      if(idx == s.size()) return curr->isEnd;\n         bool ok = false;\n      if(s[idx] == '.'){\n         for(int i = 0; i < 26; i++){\n            char x = 'a' + i;\n            if(curr->child[x] && check(curr->child[x], s, idx + 1))return true;\n         }\n      } else {\n         char x = s[idx];\n         if(curr->child[x] && check(curr->child[x], s, idx + 1))return true;\n      }\n      return false;\n   }\n   bool search(string word) {\n      Node* curr = head;\n      return check(curr, word);\n   }\n};","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"notes":"","topic_tags":[]}