{"id":376793206,"lang":"java","lang_name":"Java","time":"2 years, 4 months","timestamp":1596687791,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/376793206/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"50.6 MB","code":"class TrieNode{\n    char c;\n    HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>();\n    boolean isLeaf;\n \n    public TrieNode() {}\n \n    public TrieNode(char c){\n        this.c = c;\n    }\n}\npublic class WordDictionary {\n    private TrieNode root;\n \n    public WordDictionary(){\n        root = new TrieNode();\n    }\n \n    // Adds a word into the data structure.\n    public void addWord(String word) {\n        HashMap<Character, TrieNode> children = root.children;\n \n        for(int i=0; i<word.length(); i++){\n            char c = word.charAt(i);\n \n            TrieNode t = null;\n            if(children.containsKey(c)){\n                t = children.get(c);\n            }else{\n                t = new TrieNode(c);\n                children.put(c,t);\n            }\n \n            children = t.children;\n \n            if(i == word.length()-1){\n                t.isLeaf = true;\n            }\n        }\n    }\n \n    // Returns if the word is in the data structure. A word could\n    // contain the dot character '.' to represent any one letter.\n    public boolean search(String word) {\n       return dfsSearch(root.children, word, 0);\n \n    }\n \n     public boolean dfsSearch(HashMap<Character, TrieNode> children, String word, int start) {\n        if(start == word.length()){\n            if(children.size()==0) \n                return true; \n            else\n                return false;\n        }\n \n        char c = word.charAt(start);    \n \n        if(children.containsKey(c)){\n            if(start == word.length()-1 && children.get(c).isLeaf){\n                return true;\n            }\n \n            return dfsSearch(children.get(c).children, word, start+1);\n        }else if(c == '.'){\n            boolean result = false;\n            for(Map.Entry<Character, TrieNode> child: children.entrySet()){\n                if(start == word.length()-1 && child.getValue().isLeaf){\n                    return true;\n                } \n \n                //if any path is true, set result to be true; \n                if(dfsSearch(child.getValue().children, word, start+1)){\n                    result = true;\n                }\n            }\n \n            return result;\n        }else{\n            return false;\n        }\n    }\n}\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"notes":"","topic_tags":[]}