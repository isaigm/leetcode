{"id":475256578,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617313139,"status":10,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/475256578/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"128.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        std::vector<int> nums;\n        auto ptr = head;\n        while(ptr != nullptr)\n        {\n            nums.push_back(ptr->val);\n            ptr = ptr->next;\n        }\n        int i = 0;\n        int j = nums.size() - 1;\n        while(i < j)\n        {\n            if(nums[i] != nums[j]) return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n};\n\n    \n\n    \n    \n    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"notes":"","topic_tags":[]}