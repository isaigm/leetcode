{"id":459707427,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1614089036,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/459707427/","is_pending":"Not Pending","title":"Find Largest Value in Each Tree Row","memory":"22.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    std::vector<int> largestValues(TreeNode *root)\n    {\n    std::vector<int> ans;\n        if (root == nullptr)\n        {\n            return ans;\n        }\n        std::queue<std::pair<int, TreeNode *>> q;\n        q.push({0, root});\n        int last_level = 0;\n        int last_max = INT_MIN;\n        while (!q.empty())\n        {\n            auto node = q.front();\n            if(last_level == node.first){\n                last_max = std::max(node.second->val, last_max);\n            }else{\n                ans.push_back(last_max);\n                last_max = node.second->val;\n                last_level = node.first;\n            }\n\n            q.pop();\n            if (node.second->left != nullptr)\n            {\n                q.push({node.first + 1, node.second->left});\n               \n            }\n            if (node.second->right != nullptr)\n            {\n                q.push({node.first + 1, node.second->right});\n            }\n            if(q.size() == 0)\n            {\n                ans.push_back(std::max(node.second->val, last_max));\n            }\n        }\n\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-largest-value-in-each-tree-row","has_notes":false,"notes":"","topic_tags":[]}