{"id":456135476,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613349933,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/456135476/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"13.6 MB","code":"class Solution {\npublic:\n    bool isBipartiteUtil(vector<vector<int>>& graph, int src, std::vector<int> &colors) {\n        std::queue<int> q;\n        q.push(src);\n        colors[src] = 1;\n        while(!q.empty())\n        {\n            int u = q.front();\n            q.pop();\n            if(graph[u].size() == 0){\n                if(u < graph.size() - 1){\n                    q.push(u + 1);\n                    \n                }\n            }else{\n                 for(int i = 0; i < graph[u].size(); i++)\n            {\n                int v = graph[u][i];\n                if(colors[v] == -1)\n                {\n                    colors[v] = 1 - colors[u];\n                    q.push(v);\n                }else if(colors[v] == colors[u])\n                {\n                    return false;\n                }\n            }\n            }\n        }\n        return true;\n    }\n    bool isBipartite(vector<vector<int>>& graph){\n        std::vector<int> colors(graph.size(), -1);\n        for(int i = 0; i < graph.size(); i++)\n        {\n            if(colors[i] == -1)\n            {\n                if(!isBipartiteUtil(graph, i, colors)) return false;\n            }\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite","has_notes":false,"notes":"","topic_tags":[]}