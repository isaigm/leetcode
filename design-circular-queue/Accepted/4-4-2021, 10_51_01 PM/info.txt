{"id":476630649,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617594661,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/476630649/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"16.5 MB","code":"class MyCircularQueue {\npublic:\n    MyCircularQueue(int k) {\n        max_size = k;\n    }\n    \n    bool enQueue(int value) {\n        if(!isFull())\n        {\n            data.push_back(value);\n            return true;\n        }\n        return false;\n    }\n    \n    bool deQueue() {\n        if(!isEmpty())\n        {\n            data.erase(data.begin());\n            return true;\n        }\n        return false;\n    }\n    \n    int Front() {\n        if(!isEmpty())\n        {\n            return data.front();\n        }\n        return -1;\n    }\n    \n    int Rear() {\n        if(!isEmpty())\n        {\n            return data.back();\n        }\n        return -1;\n    }\n    \n    bool isEmpty() {\n        return data.empty();\n    }\n    \n    bool isFull() {\n        return data.size() == max_size;\n    }\n    private:\n        std::vector<int> data;\n        int max_size = 0;\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"notes":"","topic_tags":[]}