{"id":868736638,"lang":"cpp","lang_name":"C++","time":"4Â minutes","timestamp":1672527092,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/868736638/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"26 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n  TreeNode* sortedListToBST(ListNode* head) {\n    std::vector<int> nodes;\n    auto cursor = head;\n    while (cursor)\n    {\n        nodes.push_back(cursor->val);\n        cursor = cursor->next;\n    }\n    TreeNode *res = nullptr;\n    createTree(&res, nodes, 0, nodes.size());\n    return res;\n}\nvoid createTree(TreeNode** node, std::vector<int> &nodes, int left, int right)\n{\n    if (left < right)\n    {\n        int mid = left + (right - left) / 2;\n        *node = new TreeNode(nodes[mid]);\n\n        createTree(&((*node)->left), nodes, left, mid);\n        createTree(&((*node)->right), nodes, mid + 1, right);\n    }\n}\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"notes":"","topic_tags":[]}