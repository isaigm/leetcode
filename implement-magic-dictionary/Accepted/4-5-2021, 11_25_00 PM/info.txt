{"id":477084408,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1617683100,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/477084408/","is_pending":"Not Pending","title":"Implement Magic Dictionary","memory":"17.9 MB","code":"class MagicDictionary {\npublic:\n    /** Initialize your data structure here. */\n    MagicDictionary() {\n        \n    }\n    \n    void buildDict(vector<string> dictionary) {\n        data = dictionary;\n    }\n    \n    bool search(string searchWord) {\n        auto is_valid = [](std::string &s1, std::string &s2)\n        {\n            if(s1.size() != s2.size()) return false;\n            int equals = 0;\n            int not_equals = 0;\n            for(int i = 0; i < s1.size(); i++)\n            {\n                if(s1[i] != s2[i]){\n                    not_equals++;\n                    if(not_equals > 1) return false;\n                }else equals++;\n            }\n            return not_equals == 1 && equals == s1.size() - 1;\n        };\n        for(auto &x: data)\n        {\n            if(is_valid(x, searchWord)) return true;\n        }\n        return false;\n    }\n    std::vector<std::string> data;\n};\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary* obj = new MagicDictionary();\n * obj->buildDict(dictionary);\n * bool param_2 = obj->search(searchWord);\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"implement-magic-dictionary","has_notes":false,"notes":"","topic_tags":[]}