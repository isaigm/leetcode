{"id":477056868,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1617678826,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/477056868/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        int d = 0;\n        maxDepth(d, root);\n        return d;\n    }\n    int maxDepth(int & d, TreeNode *root)\n    {\n        if(root != nullptr)\n        {\n            int left = maxDepth(d, root->left);\n            int right = maxDepth(d, root->right);\n            d = std::max(d, left + right);\n            return std::max(left, right) + 1;\n        }\n        return 0;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"notes":"","topic_tags":[]}