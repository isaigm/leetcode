{"id":476207443,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617509801,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/476207443/","is_pending":"Not Pending","title":"Univalued Binary Tree","memory":"10 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isUnivalTree(TreeNode* root) {\n        int keys = 1;\n        std::map<int, int> frq;\n        dfs(frq, root);\n        for(const auto &p: frq)\n        {\n            if(keys >= 2) return false;\n            keys++;\n        }\n        return true;\n    }\n    void dfs(std::map<int, int> &frq, TreeNode *root)\n    {\n        if(root)\n        {\n            frq[root->val]++;\n            dfs(frq, root->left);\n            dfs(frq, root->right);\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"univalued-binary-tree","has_notes":false,"notes":"","topic_tags":[]}