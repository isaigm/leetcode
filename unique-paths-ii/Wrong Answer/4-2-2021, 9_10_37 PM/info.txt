{"id":475737365,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617419437,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/475737365/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int rows = obstacleGrid.size();\n        int cols = obstacleGrid[0].size();\n        int dp[rows][cols];\n        if(obstacleGrid[0][0] == 1 || obstacleGrid[rows-1][cols-1] == 0) return 0;\n        dp[0][0] = 1;\n        for(int i = 0; i < rows; i++)\n        {\n            for(int j = 0; j < cols; j++)\n            {\n                if(i != 0 || j != 0)\n                {\n                    if(obstacleGrid[i][j] != 1)\n                    {\n                          int up = INT_MAX;\n                    int left = INT_MAX;\n                    bool has_left = false;\n                    bool has_up = false;\n                    if(j - 1 >= 0)\n                    {\n                        left = dp[i][j - 1];\n                        has_left = true;\n                    }\n                    if(i - 1 >= 0)\n                    {\n                        up = dp[i - 1][j];\n                        has_up = true;\n                    }\n                    if(has_left && has_up)\n                    {\n                        dp[i][j] = left + up;\n                    }else if(has_left)\n                    {\n                        dp[i][j] = left;\n                    }else if(has_up)\n                    {\n                        dp[i][j] = up;\n                    }\n                    }else dp[i][j] = 0;\n                    \n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];\n    }\n};","compare_result":"00101011101110001110110011100000000000000","title_slug":"unique-paths-ii","has_notes":false,"notes":"","topic_tags":[]}