{"id":506162435,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1623375760,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/506162435/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"N/A","code":"class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        s1.push(x);\n      \n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        int y = 0;\n        bool _delete = true;\n        util(0, y, _delete);\n        return y;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        int y = 0;\n        bool _delete = false;\n\n        util(0, y, _delete);\n        return y;\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return s1.empty();\n    }\n    void util(int x, int &y, bool &_delete)\n    {\n        if(!s1.empty())\n        {\n            x = s1.top();\n            s1.pop();\n            if(s1.empty())\n            {\n                y = x;\n            }\n            util(x, y, _delete);\n            if(s1.empty() && _delete) \n            {\n                _delete = true;\n            }\n            s1.push(x);\n        }\n    }\n    std::stack<int> s1;\n\n};\n\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11110110110011100000","title_slug":"implement-queue-using-stacks","has_notes":false,"notes":"","topic_tags":[]}