{"id":385448669,"lang":"c","lang_name":"C","time":"2 years, 4 months","timestamp":1598234937,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/385448669/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"N/A","code":"bool is_valid(int num, int sub, int row, int col, char **board)\n{\n    int r = 0, c = 0;\n    switch (sub)\n    {\n    case 1:\n        break;\n    case 2:\n        c = 3;\n        break;\n    case 3:\n        c = 6;\n        break;\n    case 4:\n        r = 3;\n        c = 0;\n        break;\n    case 5:\n        r = 3;\n        c = 3;\n        break;\n    case 6:\n        r = 3;\n        c = 6;\n        break;\n    case 7:\n        r = 6;\n        c = 0;\n        break;\n    case 8:\n        r = 6;\n        c = 3;\n        break;\n    case 9:\n        r = 6;\n        c = 6;\n        break;\n    default:\n        break;\n    }\n    for (int i = r; i < r + 3; i++)\n    {\n        for (int j = c; j < c + 3; j++)\n        {\n            if ((board[i][j] - '0') == num)\n            {\n                return false;\n            }\n        }\n    }\n    for (int i = 0; i < 9; i++)\n    {\n        int d1 = board[row][i] - '0';\n        int d2 = board[i][col] - '0';\n        if (d1 == num || d2 == num)\n            return false;\n    }\n    return true;\n}\nvoid backtracking(int row, int col, int *total, bool *flag, char **board)\n{\n    if (*total == 81)\n    {\n        *flag = true;\n        return;\n    }\n    while (board[row][col] != '.')\n    {\n        col++;\n        if (col >= 9)\n        {\n            col = 0;\n            row++;\n            if (row >= 9)\n            {\n                *flag = true;\n                return;\n            }\n        }\n    }\n    int sub;\n    if (row >= 0 && row <= 2)\n    {\n        if (col >= 0 && col <= 2)\n        {\n            sub = 1;\n        }\n        if (col >= 3 && col <= 5)\n        {\n            sub = 2;\n        }\n        if (col >= 6 && col <= 8)\n        {\n            sub = 3;\n        }\n    }\n    else if (row >= 3 && row <= 5)\n    {\n        if (col >= 0 && col <= 2)\n        {\n            sub = 4;\n        }\n        if (col >= 3 && col <= 5)\n        {\n            sub = 5;\n        }\n        if (col >= 6 && col <= 8)\n        {\n            sub = 6;\n        }\n    }\n    else if (row >= 6 && row <= 8)\n    {\n        if (col >= 0 && col <= 2)\n        {\n            sub = 7;\n        }\n        if (col >= 3 && col <= 5)\n        {\n            sub = 8;\n        }\n        if (col >= 6 && col <= 8)\n        {\n            sub = 9;\n        }\n    }\n    for (int i = 1; i <= 9; i++)\n    {\n        if (is_valid(i, sub, row, col, board))\n        {\n            board[row][col] = i + '0';\n            int temp_c = col;\n            int temp_r = row;\n            temp_c++;\n            if (temp_c >= 9)\n            {\n                temp_r++;\n                temp_c = 0;\n            }\n            *total = *total + 1;\n            backtracking(temp_r, temp_c, total, flag, board);\n            if (*flag)\n                return;\n            *total = *total - 1;\n            board[row][col] = '.';\n        }\n    }\n    *flag = false;\n}\n\nvoid solveSudoku(char** board, int boardSize, int* boardColSize){\n    int total = 0;\n    bool flag = false;\n    backtracking(0, 0, &total, &flag, board);}","compare_result":"100000","title_slug":"sudoku-solver","has_notes":false,"notes":"","topic_tags":[]}