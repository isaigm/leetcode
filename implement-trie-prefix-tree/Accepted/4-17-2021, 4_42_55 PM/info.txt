{"id":481892126,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1618695775,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/481892126/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"30.2 MB","code":"struct node\n{\n    char ch;\n    bool is_end = false;\n    std::vector<node*> childs;\n    node(char ch = '\\0')\n    {\n        this->ch = ch;\n    }\n\n};\nvoid insert(node* root, std::string &word, size_t idx)\n{\n    if (idx < word.size())\n    {\n        node* parent = nullptr;\n        \n        for (auto& child : root->childs)\n        {\n            if (child->ch == word[idx])\n            {\n                parent = child;\n                break;\n            }\n        }\n        if (parent == nullptr)\n        {\n            auto n = new node(word[idx]);\n            root->childs.push_back(n);\n            insert(n, word, idx + 1);\n        }\n        else\n        {\n            insert(parent, word, idx + 1);\n        }\n    }else root->is_end = true;\n}\nstd::pair<bool, node*> prefix(node* root, std::string &word, size_t idx)\n{\n    std::pair<bool, node*> ans = {true, root};\n    if (idx < word.size())\n    {\n        node* parent = nullptr;\n        for (auto& child : root->childs)\n        {\n            if (child->ch == word[idx])\n            {\n                parent = child;\n                break;\n            }\n        }\n        if (parent)\n        {\n            ans = prefix(parent, word, idx + 1);\n        }\n        else return {false, nullptr};\n    }\n    return ans;\n}\n\n\n\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n        root = new node();\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        ::insert(root, word, 0);\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        auto [f, node] = ::prefix(root, word, 0);\n        if(f)\n        {\n            return node->is_end;\n        }\n        return false;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        auto [f, node] = ::prefix(root, prefix, 0);\n        return f;\n    }\n    node *root = nullptr;\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"notes":"","topic_tags":[]}