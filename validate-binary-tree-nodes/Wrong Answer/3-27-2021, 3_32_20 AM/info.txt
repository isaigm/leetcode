{"id":472976260,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1616837540,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/472976260/","is_pending":"Not Pending","title":"Validate Binary Tree Nodes","memory":"N/A","code":"class Solution {\npublic:\n    void cycle_detection(bool &flag, int root, vector<int>& leftChild, vector<int>& rightChild, std::set<int> &nodes)\n    {\n        if(root != -1)\n        {\n            if(nodes.find(root) != nodes.end()){\n                flag = true;\n                return;\n            }\n            nodes.insert(root);\n            cycle_detection(flag, leftChild[root], leftChild, rightChild, nodes);\n            if(flag) return;\n            cycle_detection(flag, rightChild[root], leftChild, rightChild, nodes); \n            if(flag) return;\n        }\n    }\n    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {\n        std::map<int, int> m;\n        int roots = 0;\n        for(int i = 0; i < n; i++)\n        {\n            if(leftChild[i] != -1)\n            {\n                m[leftChild[i]]++;\n            }\n            if(rightChild[i] != -1)\n            {\n                m[rightChild[i]]++;\n            }\n        }\n        for(const auto &it: m)\n        {\n            if(it.second >= 2) return false;\n    \n        }\n        for(int i = 0; i < n; i++)\n        {\n            if(m[i] == 0)\n            {\n                std::set<int> nodes;\n                bool flag = false;\n                cycle_detection(flag, i, leftChild, rightChild, nodes);\n                if(flag) return false;\n                roots++;\n            }\n            if(roots > 1)\n            {\n                return false;\n            }\n            \n        }\n        if(roots == 0) return false;\n        return true;\n    }\n};","compare_result":"11111111011111111010111111111111111111111","title_slug":"validate-binary-tree-nodes","has_notes":false,"notes":"","topic_tags":[]}