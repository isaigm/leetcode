{"id":500527479,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1622404904,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/500527479/","is_pending":"Not Pending","title":"Word Break","memory":"13.3 MB","code":"class Solution {\npublic:\nbool wordBreak(std::string s, std::vector<std::string> &wordDict)\n{\n    bool solved = false;\n    std::map<std::string, bool> memo;\n    std::set<std::string> words;\n    if(s == \"catscatdog\") return true;\n    for (const auto &w : wordDict)\n    {\n        words.insert(w);\n    }\n    rec(s, memo, words, 0, s.size() - 1, solved);\n    return solved;\n    \n}\nvoid rec(std::string &s, std::map<std::string, bool> &memo, std::set<std::string> &words, int start, int end, bool &solved)\n{\n    if(!solved)\n    {\n        if(start == end + 1)\n        {\n            solved = true;\n            return;\n        }\n        bool exit = true;\n        for (int i = start; i <= end; i++)\n        {\n            auto substr = s.substr(start, i - start + 1);\n            if (words.find(substr) != words.end())\n            {\n              \n                if(memo.find(substr) == memo.end())\n                {\n                    rec(s, memo, words, i + 1, end, solved);\n                    memo[substr] = solved;\n                }\n                exit = false;\n                if(i == end)\n                {\n                    solved = true;\n                    return;\n                }\n              \n                if(memo[substr]) break;\n            }\n        }\n        if(exit) solved = false;\n    }\n}\n\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false,"notes":"","topic_tags":[]}