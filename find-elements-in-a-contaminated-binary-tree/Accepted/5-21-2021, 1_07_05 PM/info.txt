{"id":496343555,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1621620425,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/496343555/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"21.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nvoid dfs(TreeNode *root, std::set<int> &table)\n{\n    if(root)\n    {\n        \n        table.insert(root->val);\n        if(root->left != nullptr)\n        {\n            root->left->val = 2 * root->val + 1;\n        }\n        if(root->right != nullptr)\n        {\n            root->right->val = 2 * root->val + 2;\n        }\n        dfs(root->left, table);\n        dfs(root->right, table);\n    }\n}\nclass FindElements {\npublic:\n    FindElements(TreeNode* root) {\n        root->val = 0;\n        ::dfs(root, table);\n    }\n    \n    bool find(int target) {\n        return table.find(target) != table.end();\n    }\n    std::set<int> table;\n};\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements* obj = new FindElements(root);\n * bool param_1 = obj->find(target);\n */","compare_result":"111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree","has_notes":false,"notes":"","topic_tags":[]}