{"id":437807479,"lang":"cpp","lang_name":"C++","time":"1 year, 12 months","timestamp":1609644068,"status":10,"status_display":"Accepted","runtime":"1112 ms","url":"/submissions/detail/437807479/","is_pending":"Not Pending","title":"Find a Corresponding Node of a Binary Tree in a Clone of That Tree","memory":"166.1 MB","code":"/*\n  struct TreeNode {\n      int val;\n      TreeNode *left;\n      TreeNode *right;\n      TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n  };\n */\n\nclass Solution {\npublic:\n    TreeNode* getTargetCopy(TreeNode* original, TreeNode* cloned, TreeNode* target) {\n        return findTargetCopy(cloned, target);\n    }\n    TreeNode *findTargetCopy(TreeNode *cursor, TreeNode *target)\n    {\n        TreeNode *node = NULL;\n        if(cursor != NULL)\n        {\n            if(cursor->val == target->val)\n            {\n                int l1 = cursor->left == NULL ? 0 : cursor->left->val;\n                int r1 = cursor->right == NULL ? 0 : cursor->right->val;\n                int l2 = target->left == NULL ? 0 : target->left->val;\n                int r2 = target->right == NULL ? 0 : target->right->val;\n                if(l1 == l2 && r1 == r2)\n                {\n                    return cursor;\n                }\n            }\n            node = findTargetCopy(cursor->left, target);\n            if(node != NULL) return node;\n            node = findTargetCopy(cursor->right, target);\n            if(node != NULL) return node;\n          \n        }\n        return node;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree","has_notes":false,"notes":"","topic_tags":[]}