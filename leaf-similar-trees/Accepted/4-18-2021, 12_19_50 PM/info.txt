{"id":482253627,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1618766390,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/482253627/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"12.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        std::vector<int> leaves1;\n        std::vector<int> leaves2;\n        dfs(root1, leaves1);\n        dfs(root2, leaves2);\n        if(leaves1.size() != leaves2.size()) return false;\n        for(size_t i = 0; i < leaves1.size(); i++)\n        {\n            if(leaves1[i] != leaves2[i]) return false;\n        }\n        return true;\n    }\n    void dfs(TreeNode *root, std::vector<int> &leaves)\n    {\n        if(root)\n        {\n            if(root->left == nullptr && root->right == nullptr)\n            {\n                leaves.push_back(root->val);\n            }\n            dfs(root->left, leaves);\n            dfs(root->right, leaves);\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"notes":"","topic_tags":[]}