{"id":478791080,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1618040796,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/478791080/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"12.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n        std::vector<std::string> ans;\n        dfs(\"\", ans, root);\n        return ans;\n    }\n    void dfs(std::string s, std::vector<std::string> &ans, TreeNode *root)\n    {\n        if(root)\n        {\n            if(root->left == nullptr && root->right == nullptr)\n            {\n                s += std::to_string(root->val);\n                ans.push_back(s);\n                return;\n            }\n            dfs(s + std::to_string(root->val) + \"->\", ans, root->left);\n            dfs(s + std::to_string(root->val) + \"->\", ans, root->right);\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths","has_notes":false,"notes":"","topic_tags":[]}