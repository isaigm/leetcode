{"id":832410575,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1667012085,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/832410575/","is_pending":"Not Pending","title":"Pseudo-Palindromic Paths in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode *root, std::vector<int> &path, int &cnt)\n    {\n        if(root == nullptr) return;\n        path.push_back(root->val);\n        if(root->left == nullptr && root->right == nullptr)\n        {\n            if(is_palindrome(path)) cnt++;\n        }else\n        {\n            helper(root->left, path, cnt);\n            helper(root->right, path, cnt);\n        }\n        path.pop_back();\n    }\n    int pseudoPalindromicPaths (TreeNode* root) {\n        int cnt = 0;\n        std::vector<int> path;\n        helper(root, path, cnt);\n        return cnt;\n    }\n    bool is_palindrome(std::vector<int> &path)\n    {\n        std::map<int, int> cnt;\n        for(auto &val: path)\n        {\n            cnt[val]++;\n        }\n        int how_many = 0;\n        for(auto &n: cnt)\n        {\n            if(n.second & 1) how_many++;\n        }\n        if(how_many <= 1) return true;\n        return false;\n    }\n\n    \n};\n//3311 2 113","compare_result":"11111111111111111111111111111111111111111111111111111000","title_slug":"pseudo-palindromic-paths-in-a-binary-tree","has_notes":false,"notes":"","topic_tags":[]}