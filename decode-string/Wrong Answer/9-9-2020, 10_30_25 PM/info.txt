{"id":393557460,"lang":"cpp","lang_name":"C++","time":"2 years, 3 months","timestamp":1599708625,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/393557460/","is_pending":"Not Pending","title":"Decode String","memory":"N/A","code":"class Solution {\npublic:\n    int find_closing_bracket(const std::string &s, int pos)\n{\n    int depth = 1;\n    for (int i = pos + 1; i < int(s.length()); i++)\n    {\n        switch (s[i])\n        {\n        case '[':\n            depth++;\n            break;\n        case ']':\n            if (--depth == 0)\n            {\n                return i;\n            }\n            break;\n        }\n    }\n    return -1;\n}\n\nstd::string repeat(std::string &s, int n)\n{\n    std::ostringstream os;\n    for (int i = 0; i < n; i++)\n        os << s;\n    return os.str();\n}\n\nstd::string helper(std::map<int, int> &brackets, std::string &s,\n                   size_t &i)\n{\n    std::string temp = \"\";\n    std::string h = \"\";\n    while (i < s.size())\n    {\n        \n        std::string k;\n        if(!isdigit(s[i]) && s[i] != ']'){\n            h.push_back(s[i]);\n        }\n        while (isdigit(s[i]))\n        {\n            k.push_back(s[i]);\n            i++;\n        }\n        if (k.size() > 0)\n        {\n            std::stringstream st(k);\n            int times;\n            st >> times;\n            size_t start = i + 1;\n            size_t end = brackets[i];\n            for (size_t j = start; j < end; j++)\n            {\n                if (isdigit(s[j]))\n                {\n                    i = j;\n                    temp += helper(brackets, s, i);\n                    j = i;\n                }\n                else if (s[j] == '[')\n                {\n                    i = j + 1;\n                    temp += helper(brackets, s, i);\n                    j = i;\n                }\n                else if(s[j] != ']')\n                {\n                    temp.push_back(s[j]);\n                }\n            }\n            i = end;\n            h += repeat(temp, times);\n            temp = \"\";\n        }\n        i++;\n    }\n    return h;\n}\n\n    string decodeString(string s) {\n         std::map<int, int> brackets;\n        for (size_t j = 0; j < s.size(); j++)\n    {\n        if (s[j] == '[')\n        {\n            brackets[j] = find_closing_bracket(s, j);\n        }\n    }\n        size_t i = 0;\n    auto t = helper(brackets, s, i);\n        return t;\n    }\n};","compare_result":"11111111100111110111011101111","title_slug":"decode-string","has_notes":false,"notes":"","topic_tags":[]}