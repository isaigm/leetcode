{"id":393082303,"lang":"java","lang_name":"Java","time":"2 years, 3 months","timestamp":1599620724,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/393082303/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"37.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n void helper(TreeNode root, AtomicInteger sum, StringBuilder n){\n        if(root != null){\n            n.append(String.valueOf(root.val));\n\n            if(root.left == null && root.right == null){\n                int k = Integer.parseInt(n.toString());\n                sum.set(sum.addAndGet(k));\n            }else{\n                helper(root.left, sum, n);\n                helper(root.right, sum, n);\n            }\n            if (n.length() > 0) {\n                n.setLength(n.length() - 1);\n            }\n\n        }\n    }\n    int sumNumbers(TreeNode root) {\n        AtomicInteger sum = new AtomicInteger();\n        sum.set(0);\n        StringBuilder n = new StringBuilder();\n        helper(root, sum, n);\n        return sum.get();\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-root-to-leaf-numbers","has_notes":false,"notes":"","topic_tags":[]}