{"id":542189155,"lang":"cpp","lang_name":"C++","time":"1 year, 4 months","timestamp":1629599725,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/542189155/","is_pending":"Not Pending","title":"Longest Subarray of 1's After Deleting One Element","memory":"36.6 MB","code":"class Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        std::vector<int> zeroes;\n        int ans = 0;\n        for(int i = 0; i < nums.size(); i++)\n        {\n            if(nums[i] == 0)\n            {\n                zeroes.push_back(i);\n            }\n        }\n    \n        if(zeroes.size() == 0) return nums.size() - 1;\n        for(const auto &z: zeroes)\n        {\n           \n            int len = 0;\n            if(z - 1 < 0)\n            {\n                for(int i = z + 1; i < nums.size() && nums[i] == 1; i++)\n                {\n                    len++;\n                }\n            }\n            else if(z + 1 >= nums.size()){\n           \n                for(int i = z - 1; i >= 0 && nums[i] == 1; i--)\n                {\n                    len++;\n                }\n            }else if(nums[z + 1] == 1 || nums[z - 1] == 1)\n            {\n\n             \n                 for(int i = z + 1; i < nums.size() && nums[i] == 1; i++)\n                {\n                    len++;\n                }\n                 for(int i = z - 1; i >= 0 && nums[i] == 1; i--)\n                {\n                    len++;\n                }\n            }\n            ans = std::max(ans, len);\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"notes":"","topic_tags":[]}