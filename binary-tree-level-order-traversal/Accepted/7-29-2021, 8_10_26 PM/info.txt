{"id":530383502,"lang":"cpp","lang_name":"C++","time":"1 year, 5 months","timestamp":1627607426,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/530383502/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"12.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        std::vector<std::vector<int>> ans;\n        if(root == nullptr) return ans;\n        std::queue<TreeNode *> q;\n        q.push(root);\n        while(!q.empty())\n        {\n            int n = q.size();\n            std::vector<int> v;\n            for(int i = 0; i < n; i++)\n            {\n                auto node = q.front();\n                q.pop();\n                \n                v.push_back(node->val);\n                if(node->left){\n                    q.push(node->left);\n                }\n                if(node->right)\n                {\n                    q.push(node->right);\n                }\n            }\n            ans.push_back(v);\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"notes":"","topic_tags":[]}