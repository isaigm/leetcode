{"id":528214971,"lang":"cpp","lang_name":"C++","time":"1 year, 5 months","timestamp":1627240200,"status":10,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/528214971/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"67.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* balanceBST(TreeNode* root) {\n        std::vector<int> nodes;\n        std::set<int> seen;\n        inorder(root, nodes);\n        TreeNode *ans = nullptr;\n        gen(&ans, nodes, seen, 0, nodes.size() - 1);\n        return ans;\n    }\n    void inorder(TreeNode *root, std::vector<int> &nodes)\n    {\n        if(root)\n        {\n            inorder(root->left, nodes);\n            nodes.push_back(root->val);\n            inorder(root->right, nodes);\n        }\n    }\n    void gen(TreeNode **root, std::vector<int> &nodes, std::set<int> &seen, int left, int right)\n    {\n        if(left < right)\n        {\n            int mid = left + (right - left) / 2;\n            *root = new TreeNode(nodes[mid]);\n            seen.insert(nodes[mid]);\n            gen(&((*root)->left), nodes, seen, left, mid);\n            gen(&((*root)->right), nodes, seen, mid + 1, right);\n        }else if(left == right && seen.find(nodes[left]) == seen.end())\n        {\n            *root = new TreeNode(nodes[left]);\n            seen.insert(nodes[left]);\n        }\n    }\n};","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"notes":"","topic_tags":[]}