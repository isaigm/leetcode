{"id":407067414,"lang":"cpp","lang_name":"C++","time":"2 years, 2 months","timestamp":1602365323,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/407067414/","is_pending":"Not Pending","title":"Rotate List","memory":"12.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if(head == nullptr) return nullptr;\n        std::vector<ListNode *> nodes;\n        auto curr = head;\n        while(curr != nullptr)\n        {\n            nodes.push_back(curr);\n            curr = curr->next;\n        }\n        std::vector<ListNode *> tmp(nodes.size());\n        for(int i = 0; i < tmp.size(); i++){\n            tmp[(i + k) % tmp.size()] = nodes[i];\n        }\n        for(int i = 0; i < tmp.size() - 1; i++){\n           tmp[i]->next = tmp[i + 1];\n        }\n        tmp[tmp.size() - 1]->next = nullptr;\n        return tmp[0];  \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"notes":"","topic_tags":[]}