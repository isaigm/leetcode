{"id":535501258,"lang":"python3","lang_name":"Python3","time":"1 year, 4 months","timestamp":1628471190,"status":10,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/535501258/","is_pending":"Not Pending","title":"N-Queens","memory":"14.7 MB","code":"def not_attacked(queens, q1, q2):\n    flag = True\n    flag = flag and (queens[q1] != queens[q2])\n    flag = flag and abs(queens[q1] - queens[q2]) != abs(q1 - q2)\n    return flag\n\ndef is_ok(queens, i):\n    for idx in range(i):\n        if not not_attacked(queens, i, idx):\n            return False\n    return True\n\ndef bt(solutions, queens, i, n):\n    if i == n:\n        solution = []\n        for idx in range(n):\n            s = \".\" * n\n            s = s[:queens[idx]] + 'Q' + s[queens[idx] + 1:]\n            solution.append(s)\n        solutions.append(solution)\n        return\n\n    for j in range(n):\n        queens[i] = j\n        if is_ok(queens, i):\n            bt(solutions, queens, i + 1, n)\n        else:\n            queens[i] = -1\n            \nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n     \n    \n        solutions = []\n        bt(solutions, [-1 for _ in range(n)], 0, n)\n        return solutions","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"notes":"","topic_tags":[]}