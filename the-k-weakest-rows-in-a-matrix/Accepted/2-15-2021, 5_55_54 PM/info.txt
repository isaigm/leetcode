{"id":456537353,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613433354,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/456537353/","is_pending":"Not Pending","title":"The K Weakest Rows in a Matrix","memory":"11 MB","code":"class Solution {\npublic:\n   std::vector<int> kWeakestRows(std::vector<std::vector<int>> &mat, int k)\n{\n    std::vector<std::pair<int, int>> rows;\n    std::vector<int> ans;\n    for (int i = 0; i < mat.size(); i++)\n    {\n        int last_one = -1;\n        auto row = mat[i];\n        int left = 0;\n        int right = row.size();\n        while (left < right)\n        {\n            int mid = right + (left - right) / 2;\n            if (row[mid])\n            {\n                if (mid + 1 < row.size())\n                {\n                    if (row[mid + 1] == 0)\n                    {\n                        last_one = mid;\n                        break;\n                    }\n                    else\n                    {\n                        left = mid;\n                    }\n                }\n                else\n                {\n                    last_one = mid;\n                    break;\n                }\n            }\n            else\n            {\n                if (mid - 1 >= 0)\n                {\n                    if (row[mid - 1])\n                    {\n                        last_one = mid - 1;\n                        break;\n                    }\n                    else\n                    {\n                        right = mid - 1;\n                    }\n                }\n                else\n                {\n                    last_one = -1;\n                    break;\n                }\n            }\n        }\n        std::cout << last_one + 1 << std::endl;\n\n        rows.push_back(std::make_pair(i, last_one + 1));\n    }\n    std::sort(rows.begin(), rows.end(), [](const std::pair<int, int> &p1, const std::pair<int, int> &p2) {\n        return p1.second < p2.second || (p1.second == p2.second && p1.first < p2.first);\n    });\n    for (int i = 0; i < k && i < rows.size(); i++)\n    {\n        ans.push_back(rows[i].first);\n    }\n\n    return ans;\n}\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"the-k-weakest-rows-in-a-matrix","has_notes":false,"notes":"","topic_tags":[]}