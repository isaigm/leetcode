{"id":478360171,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1617938848,"status":10,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/478360171/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"86.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        std::vector<int> ans;\n        if(root1 == nullptr && root2 == nullptr) return ans;\n        dfs(root1, ans);\n        int l1 = 0;\n        int r1 = ans.size() - 1;\n        dfs(root2, ans);\n        int l2 = r1 + 1;\n        int r2 = ans.size() - 1;\n        if(r1 > -1 && l2 > 0)\n        {\n            merge(l1, r1, l2, r2, ans);\n        }\n        return ans;\n    }\n    void dfs(TreeNode *root, std::vector<int> &ans)\n    {\n        if(root)\n        {\n            dfs(root->left, ans);\n            ans.push_back(root->val);\n            dfs(root->right, ans);\n        }\n    }\n    void merge(int l1, int r1, int l2, int r2, std::vector<int> &v)\n{\n    std::vector<int> sorted;\n    int temp = l1;\n    while (l1 < r1 + 1 && l2 < r2 + 1)\n    {\n        if (v[l1] < v[l2])\n        {\n            sorted.push_back(v[l1]);\n            l1++;\n        }\n        else\n        {\n            sorted.push_back(v[l2]);\n            l2++;\n        }\n    }\n    if (l1 == r1 + 1)\n    {\n        for (int i = l2; i <= r2; i++)\n        {\n            sorted.push_back(v[i]);\n        }\n    }\n    else if (l2 == r2 + 1)\n    {\n        for (int i = l1; i <= r1; i++)\n        {\n            sorted.push_back(v[i]);\n        }\n    }\n    for (int i = temp, j = 0; i <= r2; i++, j++)\n    {\n        v[i] = sorted[j];\n    }\n}\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees","has_notes":false,"notes":"","topic_tags":[]}