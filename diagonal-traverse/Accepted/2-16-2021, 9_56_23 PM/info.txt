{"id":457018817,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613534183,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/457018817/","is_pending":"Not Pending","title":"Diagonal Traverse","memory":"18.4 MB","code":"class Solution {\npublic:\n    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\n        std::vector<int> ans;\n        int rows = matrix.size();\n        if(rows == 0) return ans;\n        int cols = matrix[0].size();\n        int r = 0, c = 0;\n        bool dir = true;\n        while(r != rows - 1 || c != cols - 1)\n        {\n            if(dir)\n            {\n                for(; r >= 0 && c < cols; r--, c++){\n                    ans.push_back(matrix[r][c]);\n                }\n                r++;\n                c--;\n                if(c + 1 < cols){\n                    c++;\n                }else{\n                    r++;\n                }\n                \n            }else{\n                for(; r < rows && c >= 0; r++, c--)\n                {\n                    ans.push_back(matrix[r][c]);\n                }\n                r--;\n                c++;\n                if(r + 1 < rows){\n                    r++;\n                }else{\n                    c++;\n                }\n            }\n            dir = !dir;\n        }\n        ans.push_back(matrix[rows - 1][cols - 1]);\n        return ans;\n        \n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"diagonal-traverse","has_notes":false,"notes":"","topic_tags":[]}