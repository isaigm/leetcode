{"id":462776460,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1614729357,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/462776460/","is_pending":"Not Pending","title":"Alphabet Board Path","memory":"6.9 MB","code":"class Solution {\npublic:\n    string alphabetBoardPath(string target) {\n        std::string s;\n        std::vector<std::string> board {\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\",                \"z0000\"};\n        std::map<char, std::pair<int, int>> m;\n        for(int i = 0; i < board.size(); i++)\n        {\n            for(int j = 0; j < board[i].size(); j++)\n            {\n                if(board[i][j] != '0')\n                {\n                    m[board[i][j]] = {j, i};\n                }\n            }\n        }\n        int idx = 0;\n        int curr_x = 0, curr_y = 0;\n        auto get_next_dir = [&board](int curr_x, int curr_y, int next_x, int next_y)\n        {\n            std::vector<std::pair<int, char>> neighbours;\n            if(curr_x - 1 >= 0 && board[curr_y][curr_x - 1] != '0')\n            {\n                auto md = std::abs(curr_x - 1 - next_x) + std::abs(curr_y - next_y);\n                neighbours.push_back({md, 'L'});\n            }\n            if(curr_x + 1 < board[0].size() && board[curr_y][curr_x + 1] != '0')\n            {\n                auto md = std::abs(curr_x + 1 - next_x) + std::abs(curr_y - next_y);\n                neighbours.push_back({md, 'R'});\n            }\n            if(curr_y - 1 >= 0 && board[curr_y - 1][curr_x] != '0')\n            {\n                auto md = std::abs(curr_x - next_x) + std::abs(curr_y - 1 - next_y);\n                neighbours.push_back({md, 'U'});\n            }\n            if(curr_y + 1 < board.size() && board[curr_y + 1][curr_x] != '0')\n            {\n                auto md = std::abs(curr_x - next_x) + std::abs(curr_y + 1 - next_y);\n                neighbours.push_back({md, 'D'});\n            }\n            std::sort(neighbours.begin(), neighbours.end(), [](const auto &p1, const auto &p2)             {\n                return p1.first < p2.first;\n            });\n            return neighbours[0].second;\n        };\n        for(;idx < target.size();)\n        {\n            auto next_letter = m[target[idx]];\n            if(curr_x == next_letter.first && curr_y == next_letter.second)\n            {\n                s.push_back('!');\n                idx++;\n                continue;\n            }\n            char next_dir = get_next_dir(curr_x, curr_y, next_letter.first,                                     next_letter.second);\n            switch(next_dir)\n            {\n                case 'L':\n                    curr_x--;\n                    break;\n                case 'R':\n                    curr_x++;\n                    break;\n                case 'U':\n                    curr_y--;\n                    break;\n                case 'D':\n                    curr_y++;\n                    break;\n            }\n            s.push_back(next_dir);\n           \n            if(curr_x == next_letter.first && curr_y == next_letter.second)\n            {\n                s.push_back('!');\n                idx++;\n            }\n        }\n        return s;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"alphabet-board-path","has_notes":false,"notes":"","topic_tags":[]}