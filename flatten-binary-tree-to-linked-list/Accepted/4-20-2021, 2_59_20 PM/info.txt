{"id":483153406,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1618948760,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/483153406/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        auto cursor = root;\n        std::vector<int> nodes;\n        dfs(root, nodes);\n        for(size_t i = 0; i < nodes.size(); i++)\n        {\n            cursor->val = nodes[i];\n            cursor->left = nullptr;\n            if(cursor->right == nullptr && i < nodes.size() - 1)\n            {\n                cursor->right = new TreeNode();\n            }\n            cursor = cursor->right;    \n        }\n        \n    }\n    void dfs(TreeNode *root, std::vector<int> &nodes)   \n    {\n        if(root)\n        {\n            nodes.push_back(root->val);\n            dfs(root->left, nodes);\n            dfs(root->right, nodes);\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"notes":"","topic_tags":[]}