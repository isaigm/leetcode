{"id":486900404,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1619751467,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/486900404/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(root == nullptr) 0;\n        int ans = INT_MAX;\n        dfs(root, ans);\n        return ans;\n    }\n    void dfs(TreeNode *root, int &ans, int depth = 1)\n    {\n        if(root)\n        {\n            if(root->left == nullptr && root->right == nullptr)\n            {\n                ans = std::min(ans, depth);\n            }\n            dfs(root->left, ans, depth + 1);\n            dfs(root->right, ans, depth + 1);\n        }\n    }\n};","compare_result":"1101111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false,"notes":"","topic_tags":[]}