{"id":476111893,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1617493917,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/476111893/","is_pending":"Not Pending","title":"Linked List in Binary Tree","memory":"32 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubPath(ListNode* head, TreeNode* root) {\n        bool ans = false;\n        dfs(ans, root, head);\n        return ans;\n    }\n    void dfs(bool &ans, TreeNode *root, ListNode *head)\n    {\n        if(root != nullptr)\n        {\n            if(root->val == head->val)\n            {\n                util(ans, root, head);\n                if(ans) return;\n            }\n            dfs(ans, root->left, head);\n            dfs(ans, root->right, head);\n        }\n    }\n    void util(bool &ans, TreeNode *root, ListNode*head)\n    {\n        if(root != nullptr)\n        {\n            if(root->val == head->val)\n            {\n                \n                if(head->next == nullptr)\n                {\n                    ans = true;\n                }else\n                {\n                    util(ans, root->left, head->next);\n                    if(!ans) util(ans, root->right, head->next);\n                }\n            }\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"linked-list-in-binary-tree","has_notes":false,"notes":"","topic_tags":[]}