{"id":832340968,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1666996780,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/832340968/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"22.3 MB","code":"class Solution {\npublic:\n    void search(std::vector<int> &nums, int left, int right, int &ans)\n{\n    if (right - left + 1 == 3)\n    {\n        int xorr = 0;\n        for (int i = left; i <= right; i++)\n        {\n           xorr ^= nums[i];\n        }\n        ans = xorr;\n    }\n    else\n    {\n        int mid = left + (right - left) / 2;\n        if (mid -1 > 0 &&nums[mid] == nums[mid - 1] && (mid - left - 1) % 2)\n        {\n            search(nums, left, mid - 2, ans);\n        }\n        else if (mid-1>0 &&nums[mid] != nums[mid-1] && (mid - left) % 2)\n        {\n            search(nums, left, mid - 1, ans);\n        }\n        else if (nums[mid] == nums[mid + 1] && (right - mid - 1) % 2)\n        {\n            search(nums, mid + 2, right, ans);\n        }\n        else if (nums[mid] != nums[mid + 1] && (right - mid) % 2)\n        {\n            search(nums, mid + 1, right, ans);\n        }else\n        {\n            ans = nums[mid];\n        }\n    }\n}\nint singleNonDuplicate(std::vector<int> &nums)\n{\n    int ans;\n    if(nums.size() == 1) return nums[0];\n    search(nums, 0, nums.size() - 1, ans);\n    return ans;\n}\n};","compare_result":"111111111111111","title_slug":"single-element-in-a-sorted-array","has_notes":false,"notes":"","topic_tags":[]}