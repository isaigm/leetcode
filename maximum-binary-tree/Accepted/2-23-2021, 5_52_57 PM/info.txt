{"id":459888553,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1614124377,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/459888553/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"39.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void util(std::vector<int> &nums, TreeNode **root, int left, int right){\n       if (left <= right && left >= 0 && right < nums.size())\n        {\n            auto max_val = std::max_element(nums.begin() + left, nums.begin() + right + 1);\n            *root = new TreeNode(*max_val);\n            int idx = std::distance(nums.begin(), max_val);\n            util(nums, &((*root)->left), left, idx - 1);\n            util(nums, &((*root)->right), idx + 1, right);\n        }\n    }\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        TreeNode *root = nullptr;\n        util(nums, &root, 0, nums.size() - 1);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false,"notes":"","topic_tags":[]}