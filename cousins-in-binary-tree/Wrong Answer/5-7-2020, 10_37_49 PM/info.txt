{"id":336037521,"lang":"python3","lang_name":"Python3","time":"2 years, 7 months","timestamp":1588909069,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/336037521/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        def search(node : TreeNode, value : int, k=0) -> int:\n            if node != None:\n                if value == node.val: return node, k\n                r1, k1 = search(node.left, value, k + 1)\n                if k1 != -1: return r1, k1\n                else:\n                    r2, k2 = search(node.right, value, k + 1)\n                    if k2 != -1: return r2, k2\n                return None, -1\n            else: return None, -1\n        r1, k1 = search(root, x)\n        r2, k2 = search(root, y)\n        if r1 != None and r2 != None:\n            if r1.val != r2.val:\n                return k1 == k2\n        return False","compare_result":"1101101010111110011100101111111111111110111101111111111011110011111101111111011111110101111111111111111","title_slug":"cousins-in-binary-tree","has_notes":false,"notes":"","topic_tags":[]}