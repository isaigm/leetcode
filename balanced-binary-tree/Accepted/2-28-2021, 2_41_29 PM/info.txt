{"id":461829583,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1614544889,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/461829583/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int util(TreeNode *root, bool &ans)\n    {\n        if(root != nullptr && ans)\n        {\n            int l = 1 + util(root->left, ans);\n            int r = 1 + util(root->right, ans);\n            if(std::abs(l - r) > 1)\n            {\n                ans = false;\n            }\n            return std::max(l, r);\n        }\n        return 0;\n    }\n    bool isBalanced(TreeNode* root) {\n        bool ans = true;\n        util(root, ans);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"notes":"","topic_tags":[]}