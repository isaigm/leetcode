{"id":483225658,"lang":"cpp","lang_name":"C++","time":"1 year, 8 months","timestamp":1618966201,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/483225658/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n     void util(TreeNode **root) {\n        if(*root)\n        {\n            util(&((*root)->left));\n            util(&((*root)->right)); \n            if(ones(*root) == 0){\n                delete (*root);\n                *root = nullptr;\n            }\n        }\n    }\n    TreeNode *pruneTree(TreeNode *root)\n    {\n        util(&root);\n        return root;\n    }\n    int ones(TreeNode *root)\n    {\n        if(root)   \n        {\n          \n            return root->val + ones(root->left) + ones(root->right);\n        }\n        return 0;\n    }\n};","compare_result":"11111100000000000000000000000","title_slug":"binary-tree-pruning","has_notes":false,"notes":"","topic_tags":[]}