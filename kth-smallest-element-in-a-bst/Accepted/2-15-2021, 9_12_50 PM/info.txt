{"id":456602302,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613445170,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/456602302/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"24.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void util(TreeNode *root, int k,  std::priority_queue<int, std::vector<int>, std::greater<int>> &max_heap){\n        if(root != nullptr)\n        {\n            max_heap.push(root->val);\n            util(root->left, k, max_heap);\n            util(root->right, k, max_heap);\n        }\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        std::priority_queue<int, std::vector<int>, std::greater<int>> max_heap;\n        util(root, k, max_heap);\n        while(--k){\n            max_heap.pop();\n        }\n        return max_heap.top();\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst","has_notes":false,"notes":"","topic_tags":[]}