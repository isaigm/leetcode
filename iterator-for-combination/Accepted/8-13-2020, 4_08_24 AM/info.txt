{"id":380274750,"lang":"cpp","lang_name":"C++","time":"2 years, 4 months","timestamp":1597309704,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/380274750/","is_pending":"Not Pending","title":"Iterator for Combination","memory":"12.8 MB","code":"class CombinationIterator\n{\npublic:\n    CombinationIterator(std::string characters, int combinationLength)\n    {\n        std::string curr;\n        dfs(combinations, characters, curr, combinationLength, 0);\n    }\n\n    std::string next()\n    {\n        if (curr_idx < combinations.size())\n        {\n            return combinations[curr_idx++];\n        }\n        return \"\";\n    }\n\n    bool hasNext()\n    {\n       return curr_idx < combinations.size();\n    }\n\nprivate:\n    void dfs(std::vector<std::string> &combinations, std::string &characters, std::string &curr, int max_len, int start)\n    {\n        if (curr.size() == max_len)\n        {\n            combinations.push_back(curr);\n            return;\n        }\n        for (int i = start; i < characters.size(); i++)\n        {\n            curr.push_back(characters[i]);\n            dfs(combinations, characters, curr, max_len, i + 1);\n            curr.pop_back();\n        }\n    }\n\n    std::vector<std::string> combinations;\n    size_t curr_idx = 0;\n};\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);\n * string param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111","title_slug":"iterator-for-combination","has_notes":false,"notes":"","topic_tags":[]}