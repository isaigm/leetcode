{"id":454656669,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1613012336,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/454656669/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"11.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if(head == nullptr) return head;\n        std::map<Node *, int> nodes;\n        std::map<int, Node*> inv_nodes;\n        Node *new_list = new Node(head->val);\n        Node *last = new_list;\n        Node *ptr = head;\n        for(int i = 0; ptr != nullptr; i++)\n        {\n            inv_nodes[i] = last;\n            if(ptr->next != nullptr)\n            {\n                Node *next = new Node(ptr->next->val);\n                last->next = next;\n                last = next;\n            }else{\n                last->next = nullptr;\n            }\n            nodes[ptr] = i;\n            ptr = ptr->next;\n        }\n        ptr = head;\n        last = new_list;\n        while(ptr != nullptr)\n        {\n            if(ptr->random != nullptr)\n            {\n                int idx = nodes[ptr->random];\n                last->random = inv_nodes[idx];\n            }\n            ptr = ptr->next;\n            last = last->next;\n        }\n        return new_list;\n    }\n};","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer","has_notes":false,"notes":"","topic_tags":[]}