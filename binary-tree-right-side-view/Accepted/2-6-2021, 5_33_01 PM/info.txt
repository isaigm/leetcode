{"id":452933239,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1612654381,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/452933239/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"11.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvoid rightViewUtil(TreeNode *root,std::vector<int> &res,  \n                   int level, int *max_level) \n{ \n    // Base Case \n    if (root == NULL) return; \n  \n    // If this is the last Node of its level \n    if (*max_level < level) \n    { \n        res.push_back(root->val);\n        *max_level = level; \n    } \n  \n    // Recur for right subtree first,  \n    // then left subtree \n    rightViewUtil(root->right, res, level + 1, max_level); \n    rightViewUtil(root->left, res, level + 1, max_level); \n} \n    vector<int> rightSideView(TreeNode* root) {\n        std::vector<int> vec;\n          int max_level = 0; \n    rightViewUtil(root, vec, 1, &max_level); \n        return vec;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"notes":"","topic_tags":[]}