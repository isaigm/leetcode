{"id":452931719,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1612654080,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/452931719/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(std::vector<int> &res, TreeNode *root, bool is_right_node)\n{\n    \n   static bool first_time = true;\n    if (root != NULL)\n    {\n        if (is_right_node)\n        {\n            res.push_back(root->val);\n        }\n        if (first_time)\n        {\n            helper(res, root->right, true);\n            first_time = false;\n        }\n        else\n        {\n            helper(res, root->right, true);\n            helper(res, root->left, false);\n            \n        }\n    }\n}\n    vector<int> rightSideView(TreeNode* root) {\n        std::vector<int> vec;\n        helper(vec, root, true);\n        return vec;\n    }\n};","compare_result":"1110110101010000100000010100110011000001000000000110100010010000000011000000010000001100000000000000000101000001000001000000000100000000010000001100101010000010010000000110001000100000100000100000000000000010000","title_slug":"binary-tree-right-side-view","has_notes":false,"notes":"","topic_tags":[]}