{"id":377665788,"lang":"cpp","lang_name":"C++","time":"2 years, 4 months","timestamp":1596851161,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/377665788/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n#include <algorithm>\nclass Solution {\npublic:\n   std::vector<std::vector<int>> verticalTraversal(TreeNode* root) {\n       std::map<int, std::vector<int>> nodes;\n       aux(nodes, root, 0, 0);\n       std::vector<std::vector<int>> res;\n       for(auto &it: nodes){\n           std::sort(it.second.begin(), it.second.end());\n           res.push_back(it.second);\n       }\n       return res;\n   }\n   void aux(std::map<int, std::vector<int>> &nodes, TreeNode *root, int x, int y){\n       if(root != NULL){\n           nodes[x].push_back(root->val);\n           aux(nodes, root->left, x - 1, y - 1);\n           aux(nodes, root->right, x + 1, y - 1);\n       }\n   }\n};","compare_result":"111111111101101000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"notes":"","topic_tags":[]}